;-----------------------------------------------------------------------------
; fsm65 fs monitor for 6502
; Fabio Sturman (c) 2019,20,21
; fabio.sturman@gmail.com
;-----------------------------------------------------------------------------
; i2c.a65
; i2c module through via0 6522
; SDA=pa7
; SCL=pa6
;-----------------------------------------------------------------------------
;
SDA   = (1 << 7)
SCL   = (1 << 6)

;
mi2cini:
i2c_init:       jsr i2cdh
                jmp i2cch
;
; i2cwb - write byte
;
mi2cwrt:
i2c_write:
i2cwb:          pha
                lda porta0 ;00
                and #<(~(SDA+SCL))
                sta porta0
                pla
                ldx #9
;
i2cwb_loop:     dex
                beq i2cwb_ack
                rol
                bcc i2cwb_0
                pha
                lda #1
                jsr i2csb   ; send bit
                pla
                jmp i2cwb_loop
;
i2cwb_0:        pha
                lda #0
                jsr i2csb
                pla
                jmp i2cwb_loop
;
i2cwb_ack:
                jsr i2cgb  ;get bit
                eor #1
;
i2cwb_end:      rts     ; 1=ok 0=fail
;
; i2csb - send bit
;
i2csb:          cmp #1
                beq i2csb_sda1
;
i2csb_sda0:     jsr i2cdl   ;data low
                jmp i2csb_ck
;
i2csb_sda1:     jsr i2cdh   ;data high
                jmp i2csb_ck
;
i2csb_ck:       jsr i2cch
                jsr i2ccl
                jmp i2cdl
;
; i2crb - read byte
;
mi2crea:
i2c_read:
i2crb:          lda porta0 ;00
                and #<(~(SDA+SCL))
                sta porta0
                lda #0
                pha
                ldx #9
;
i2crb_loop:     dex
                beq i2crb_end
                jsr i2cgb       ; get bit
                ror
                pla
                rol
                pha
                jmp i2crb_loop
;
i2crb_end:      pla
                rts
;
; i2cgb - get bit
;
i2cgb:          jsr i2cdh
                jsr i2cch
                lda porta0
                and #SDA
                bne i2cgb_1
                lda #0
                jmp i2cgb_end
;
i2cgb_1:        lda #1
;
i2cgb_end:      jsr i2ccl
                jmp i2cdl
;
; i2cst - start
;
mi2cstr:
i2c_start:
i2cst:          jsr i2cdl
                nop
                nop
                jsr i2ccl
                rts
;
; i2csp - stop
;
mi2cstp:
i2c_stop:
i2csp:	        jsr i2cch
                jsr i2cdh
                rts
;
; i2cak - ack
;
mi2cack:
i2c_ack:
i2cak:          pha
                lda #$00
                jsr i2csb
                pla
                rts
;
; i2cnk - nack
;
mi2cnak:
i2c_nack:
i2cnk:	        pha
                lda #$01
                jsr i2csb
                pla
                rts
;
; i2cdl - data  low
;
i2cdl:          pha
                lda ddra0
                ora #SDA
                sta ddra0
                lda porta0
                and #<~SDA
                sta porta0
                pla
                rts
;
; ic2dh - data high
;
i2cdh:          pha
                lda ddra0
                and #<~SDA
                sta ddra0
                pla
                rts
;
; i2ccl - clock low
;
i2ccl:	        pha
                lda ddra0
                ora #SCL
                sta ddra0
                lda porta0
                and #<~SCL
                sta porta0
                pla
                rts
;
; i2cch - clock high
;
i2cch:	        pha
                lda ddra0
                and #<~SCL
                sta ddra0
                pla
                rts
;


